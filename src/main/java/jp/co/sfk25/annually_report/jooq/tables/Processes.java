/*
 * This file is generated by jOOQ.
*/
package jp.co.sfk25.annually_report.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jp.co.sfk25.annually_report.jooq.Indexes;
import jp.co.sfk25.annually_report.jooq.Keys;
import jp.co.sfk25.annually_report.jooq.Sfk25;
import jp.co.sfk25.annually_report.jooq.tables.records.ProcessesRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Processes extends TableImpl<ProcessesRecord> {

    private static final long serialVersionUID = 535615744;

    /**
     * The reference instance of <code>sfk25.processes</code>
     */
    public static final Processes PROCESSES = new Processes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcessesRecord> getRecordType() {
        return ProcessesRecord.class;
    }

    /**
     * The column <code>sfk25.processes.id</code>.
     */
    public final TableField<ProcessesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sfk25.processes.value</code>.
     */
    public final TableField<ProcessesRecord, String> VALUE = createField("value", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * Create a <code>sfk25.processes</code> table reference
     */
    public Processes() {
        this(DSL.name("processes"), null);
    }

    /**
     * Create an aliased <code>sfk25.processes</code> table reference
     */
    public Processes(String alias) {
        this(DSL.name(alias), PROCESSES);
    }

    /**
     * Create an aliased <code>sfk25.processes</code> table reference
     */
    public Processes(Name alias) {
        this(alias, PROCESSES);
    }

    private Processes(Name alias, Table<ProcessesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Processes(Name alias, Table<ProcessesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sfk25.SFK25;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROCESSES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProcessesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROCESSES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProcessesRecord> getPrimaryKey() {
        return Keys.KEY_PROCESSES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProcessesRecord>> getKeys() {
        return Arrays.<UniqueKey<ProcessesRecord>>asList(Keys.KEY_PROCESSES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Processes as(String alias) {
        return new Processes(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Processes as(Name alias) {
        return new Processes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Processes rename(String name) {
        return new Processes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Processes rename(Name name) {
        return new Processes(name, null);
    }
}
