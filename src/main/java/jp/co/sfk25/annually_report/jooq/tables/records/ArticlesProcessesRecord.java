/*
 * This file is generated by jOOQ.
*/
package jp.co.sfk25.annually_report.jooq.tables.records;


import javax.annotation.Generated;

import jp.co.sfk25.annually_report.jooq.tables.ArticlesProcesses;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticlesProcessesRecord extends UpdatableRecordImpl<ArticlesProcessesRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = -1588250870;

    /**
     * Setter for <code>sfk25.articles_processes.article_id</code>.
     */
    public void setArticleId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>sfk25.articles_processes.article_id</code>.
     */
    public Integer getArticleId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>sfk25.articles_processes.process_id</code>.
     */
    public void setProcessId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>sfk25.articles_processes.process_id</code>.
     */
    public Integer getProcessId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return ArticlesProcesses.ARTICLES_PROCESSES.ARTICLE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return ArticlesProcesses.ARTICLES_PROCESSES.PROCESS_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getArticleId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getProcessId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getArticleId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getProcessId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArticlesProcessesRecord value1(Integer value) {
        setArticleId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArticlesProcessesRecord value2(Integer value) {
        setProcessId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ArticlesProcessesRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ArticlesProcessesRecord
     */
    public ArticlesProcessesRecord() {
        super(ArticlesProcesses.ARTICLES_PROCESSES);
    }

    /**
     * Create a detached, initialised ArticlesProcessesRecord
     */
    public ArticlesProcessesRecord(Integer articleId, Integer processId) {
        super(ArticlesProcesses.ARTICLES_PROCESSES);

        set(0, articleId);
        set(1, processId);
    }
}
